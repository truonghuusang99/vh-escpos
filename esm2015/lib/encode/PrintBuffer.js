// Hat-tip to HÃ¥vard Lian @ https://github.com/haavardlian/escpos
export class PrintBuffer {
    constructor(size = 1024) {
        this.buffer = new Uint8Array(size);
        this.size = 0;
    }
    clear() {
        this.size = 0;
    }
    flush() {
        const buffer = new Uint8Array(this.buffer.slice(0, this.size));
        this.size = 0;
        return buffer;
    }
    write(data) {
        this.resize(data.length);
        this.buffer.set(data, this.size);
        this.size += data.length;
        return this;
    }
    writeUInt8(value) {
        this.resize(1);
        this.buffer[this.size++] = value & 0xFF;
        return this;
    }
    writeUInt32LE(value, noAssert) {
        this.resize(4);
        // tslint:disable no-bitwise
        this.buffer[this.size++] = (value) & 0xFF;
        this.buffer[this.size++] = (value >> 8) & 0xFF;
        this.buffer[this.size++] = (value >> 16) & 0xFF;
        this.buffer[this.size++] = (value >> 24) & 0xFF;
        // tslint:enable no-bitwise
        return this;
    }
    writeUInt16LE(value, noAssert) {
        this.resize(2);
        // tslint:disable no-bitwise
        this.buffer[this.size++] = (value) & 0xFF;
        this.buffer[this.size++] = (value >> 8) & 0xFF;
        // tslint:enable no-bitwise
        return this;
    }
    resize(need) {
        const remaining = this.buffer.length - this.size;
        if (remaining < need) {
            const oldBuffer = this.buffer;
            const factor = Math.ceil((need - remaining) / oldBuffer.length) + 1;
            this.buffer = new Uint8Array(oldBuffer.length * factor);
            this.buffer.set(oldBuffer, 0);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpbnRCdWZmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy92aC1lc2Nwb3Mvc3JjL2xpYi9lbmNvZGUvUHJpbnRCdWZmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUVBQWlFO0FBQ2pFLE1BQU0sT0FBTyxXQUFXO0lBSXBCLFlBQVksT0FBZSxJQUFJO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSztRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBdUI7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdELFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDeEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hELDJCQUEyQjtRQUMzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sYUFBYSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsNEJBQTRCO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0MsMkJBQTJCO1FBQzNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFHTyxNQUFNLENBQUMsSUFBWTtRQUN2QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pELElBQUksU0FBUyxHQUFHLElBQUksRUFBRTtZQUNsQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGF0LXRpcCB0byBIw6V2YXJkIExpYW4gQCBodHRwczovL2dpdGh1Yi5jb20vaGFhdmFyZGxpYW4vZXNjcG9zXG5leHBvcnQgY2xhc3MgUHJpbnRCdWZmZXIge1xuICAgIHByaXZhdGUgYnVmZmVyOiBVaW50OEFycmF5O1xuICAgIHByaXZhdGUgc2l6ZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Ioc2l6ZTogbnVtYmVyID0gMTAyNCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIGZsdXNoKCk6IFVpbnQ4QXJyYXkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlci5zbGljZSgwLCB0aGlzLnNpemUpKTtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG5cbiAgICB3cml0ZShkYXRhOiBBcnJheUxpa2U8bnVtYmVyPik6IFByaW50QnVmZmVyIHtcbiAgICAgICAgdGhpcy5yZXNpemUoZGF0YS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zZXQoZGF0YSwgdGhpcy5zaXplKTtcbiAgICAgICAgdGhpcy5zaXplICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIHdyaXRlVUludDgodmFsdWU6IG51bWJlcik6IFByaW50QnVmZmVyIHtcbiAgICAgICAgdGhpcy5yZXNpemUoMSk7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMuc2l6ZSsrXSA9IHZhbHVlICYgMHhGRjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdyaXRlVUludDMyTEUodmFsdWU6IG51bWJlciwgbm9Bc3NlcnQ/OiBib29sZWFuKTogUHJpbnRCdWZmZXIge1xuICAgICAgICB0aGlzLnJlc2l6ZSg0KTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUgbm8tYml0d2lzZVxuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLnNpemUrK10gPSAodmFsdWUpICYgMHhGRjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5zaXplKytdID0gKHZhbHVlID4+IDgpICYgMHhGRjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5zaXplKytdID0gKHZhbHVlID4+IDE2KSAmIDB4RkY7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMuc2l6ZSsrXSA9ICh2YWx1ZSA+PiAyNCkgJiAweEZGO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlIG5vLWJpdHdpc2VcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdyaXRlVUludDE2TEUodmFsdWU6IG51bWJlciwgbm9Bc3NlcnQ/OiBib29sZWFuKTogUHJpbnRCdWZmZXIge1xuICAgICAgICB0aGlzLnJlc2l6ZSgyKTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUgbm8tYml0d2lzZVxuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLnNpemUrK10gPSAodmFsdWUpICYgMHhGRjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5zaXplKytdID0gKHZhbHVlID4+IDgpICYgMHhGRjtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZSBuby1iaXR3aXNlXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSByZXNpemUobmVlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IHRoaXMuYnVmZmVyLmxlbmd0aCAtIHRoaXMuc2l6ZTtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA8IG5lZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZEJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gTWF0aC5jZWlsKChuZWVkIC0gcmVtYWluaW5nKSAvIG9sZEJ1ZmZlci5sZW5ndGgpICsgMTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkob2xkQnVmZmVyLmxlbmd0aCAqIGZhY3Rvcik7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5zZXQob2xkQnVmZmVyLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=