/**
 * Utility function that converts numbers into hex values
 *
 * @usage:
 *   numToHex(256) => '0100'
 *   numToHex(0) => '00'
 */
let numToHexString = function (value) {
    value = +value;
    if (!isNaN(value)) {
        value = value.toString(16);
        while (value.length % 2 !== 0) {
            value = '0' + value;
        }
    }
    return value;
};
const Éµ0 = numToHexString;
/**
 * ESC/POS _ (Constants)
 */
let _ = {
    LF: '\x0a',
    FS: '\x1c',
    FF: '\x0c',
    GS: '\x1d',
    DLE: '\x10',
    EOT: '\x04',
    NUL: '\x00',
    ESC: '\x1b',
    TAB: '\x74',
    EOL: '\n'
};
/**
 * [FEED_CONTROL_SEQUENCES Feed control sequences]
 * @type {Object}
 */
_.FEED_CONTROL_SEQUENCES = {
    CTL_LF: '\x0a',
    CTL_GLF: '\x4a\x00',
    CTL_FF: '\x0c',
    CTL_CR: '\x0d',
    CTL_HT: '\x09',
    CTL_VT: '\x0b' // Vertical tab
};
_.CHARACTER_SPACING = {
    CS_DEFAULT: '\x1b\x20\x00',
    CS_SET: '\x1b\x20'
};
_.LINE_SPACING = {
    LS_DEFAULT: '\x1b\x32',
    LS_SET: '\x1b\x33'
};
/**
 * [HARDWARE Printer hardware]
 * @type {Object}
 */
_.HARDWARE = {
    HW_INIT: '\x1b\x40',
    HW_SELECT: '\x1b\x3d\x01',
    HW_RESET: '\x1b\x3f\x0a\x00' // Reset printer hardware
};
/**
 * [CASH_DRAWER Cash Drawer]
 * @type {Object}
 */
_.CASH_DRAWER = {
    CD_KICK_2: '\x1b\x70\x00\x19\xfa',
    CD_KICK_5: '\x1b\x70\x01\x19\xfa' // Sends a pulse to pin 5 []
};
/**
 * [MARGINS Margins sizes]
 * @type {Object}
 */
_.MARGINS = {
    BOTTOM: '\x1b\x4f',
    LEFT: '\x1b\x6c',
    RIGHT: '\x1b\x51' // Fix right size
};
/**
 * [PAPER Paper]
 * @type {Object}
 */
_.PAPER = {
    PAPER_FULL_CUT: '\x1d\x56\x00',
    PAPER_PART_CUT: '\x1d\x56\x01',
    PAPER_CUT_A: '\x1d\x56\x41',
    PAPER_CUT_B: '\x1d\x56\x42' // Partial cut paper
};
/**
 * [TEXT_FORMAT Text format]
 * @type {Object}
 */
_.TEXT_FORMAT = {
    TXT_NORMAL: '\x1b\x21\x00',
    TXT_2HEIGHT: '\x1b\x21\x10',
    TXT_2WIDTH: '\x1b\x21\x20',
    TXT_4SQUARE: '\x1b\x21\x30',
    TXT_CUSTOM_SIZE: function (width, height) {
        // other sizes
        let widthDec = (width - 1) * 16;
        let heightDec = height - 1;
        let sizeDec = widthDec + heightDec;
        return '\x1d\x21' + String.fromCharCode(sizeDec);
    },
    TXT_HEIGHT: {
        1: '\x00',
        2: '\x01',
        3: '\x02',
        4: '\x03',
        5: '\x04',
        6: '\x05',
        7: '\x06',
        8: '\x07'
    },
    TXT_WIDTH: {
        1: '\x00',
        2: '\x10',
        3: '\x20',
        4: '\x30',
        5: '\x40',
        6: '\x50',
        7: '\x60',
        8: '\x70'
    },
    TXT_UNDERL_OFF: '\x1b\x2d\x00',
    TXT_UNDERL_ON: '\x1b\x2d\x01',
    TXT_UNDERL2_ON: '\x1b\x2d\x02',
    TXT_BOLD_OFF: '\x1b\x45\x00',
    TXT_BOLD_ON: '\x1b\x45\x01',
    TXT_ITALIC_OFF: '\x1b\x35',
    TXT_ITALIC_ON: '\x1b\x34',
    TXT_FONT_A: '\x1b\x4d\x00',
    TXT_FONT_B: '\x1b\x4d\x01',
    TXT_FONT_C: '\x1b\x4d\x02',
    TXT_ALIGN_LT: '\x1b\x61\x00',
    TXT_ALIGN_CT: '\x1b\x61\x01',
    TXT_ALIGN_RT: '\x1b\x61\x02' // Right justification
};
/**
 * Qsprinter-compatible
 * Added by Attawit Kittikrairit
 * [MODEL Model-specific commands]
 * @type {Object}
 */
_.MODEL = {
    QSPRINTER: {
        BARCODE_MODE: {
            ON: '\x1d\x45\x43\x01',
            OFF: '\x1d\x45\x43\x00' // Barcode mode off
        },
        BARCODE_HEIGHT_DEFAULT: '\x1d\x68\xA2',
        CODE2D_FORMAT: {
            PIXEL_SIZE: {
                CMD: '\x1b\x23\x23\x51\x50\x49\x58',
                MIN: 1,
                MAX: 24,
                DEFAULT: 12
            },
            VERSION: {
                CMD: '\x1d\x28\x6b\x03\x00\x31\x43',
                MIN: 1,
                MAX: 16,
                DEFAULT: 3
            },
            LEVEL: {
                CMD: '\x1d\x28\x6b\x03\x00\x31\x45',
                OPTIONS: {
                    L: 48,
                    M: 49,
                    Q: 50,
                    H: 51
                }
            },
            LEN_OFFSET: 3,
            SAVEBUF: {
                // Format: CMD_P1{LEN_2BYTE}CMD_P2{DATA}
                // DATA Max Length: 256*256 - 3 (65533)
                CMD_P1: '\x1d\x28\x6b',
                CMD_P2: '\x31\x50\x30'
            },
            PRINTBUF: {
                // Format: CMD_P1{LEN_2BYTE}CMD_P2
                CMD_P1: '\x1d\x28\x6b',
                CMD_P2: '\x31\x51\x30'
            }
        }
    }
};
/**
 * [CODE2D_FORMAT description]
 * @type {Object}
 */
_.CODE2D_FORMAT = {
    TYPE_PDF417: _.GS + 'Z' + '\x00',
    TYPE_DATAMATRIX: _.GS + 'Z' + '\x01',
    TYPE_QR: _.GS + 'Z' + '\x02',
    CODE2D: _.ESC + 'Z',
    QR_LEVEL_L: 'L',
    QR_LEVEL_M: 'M',
    QR_LEVEL_Q: 'Q',
    QR_LEVEL_H: 'H' // correct level 30%
};
/**
 * [IMAGE_FORMAT Image format]
 * @type {Object}
 */
_.IMAGE_FORMAT = {
    S_RASTER_N: '\x1d\x76\x30\x00',
    S_RASTER_2W: '\x1d\x76\x30\x01',
    S_RASTER_2H: '\x1d\x76\x30\x02',
    S_RASTER_Q: '\x1d\x76\x30\x03' // Set raster image quadruple
};
/**
 * [BITMAP_FORMAT description]
 * @type {Object}
 */
_.BITMAP_FORMAT = {
    BITMAP_S8: '\x1b\x2a\x00',
    BITMAP_D8: '\x1b\x2a\x01',
    BITMAP_S24: '\x1b\x2a\x20',
    BITMAP_D24: '\x1b\x2a\x21'
};
/**
 * [GSV0_FORMAT description]
 * @type {Object}
 */
_.GSV0_FORMAT = {
    GSV0_NORMAL: '\x1d\x76\x30\x00',
    GSV0_DW: '\x1d\x76\x30\x01',
    GSV0_DH: '\x1d\x76\x30\x02',
    GSV0_DWDH: '\x1d\x76\x30\x03'
};
/**
 * [BEEP description]
 * @type {string}
 */
(_.BEEP = '\x1b\x42'), // Printer Buzzer pre hex
    /**
     * [COLOR description]
     * @type {Object}
     */
    (_.COLOR = {
        0: '\x1b\x72\x00',
        1: '\x1b\x72\x01',
        REVERSE: '\x1dB1',
        UNREVERSE: '\x1dB0' // Default: undo the reverse - black text on white background
    });
/**
 * [SCREEN description]
 * @type {Object}
 */
_.SCREEN = {
    BS: '\x08',
    HT: '\x09',
    LF: '\x0a',
    US_LF: '\x1f\x0a',
    HOM: '\x0b',
    CR: '\x0d',
    US_CR: '\x1f\x0d',
    US_B: '\x1f\x42',
    US_$: '\x1f\x24',
    CLR: '\x0c',
    CAN: '\x18',
    US_MD1: '\x1f\x01',
    US_MD2: '\x1f\x02',
    US_MD3: '\x1f\x03',
    US_C: '\x1f\x43',
    US_E: '\x1f\x45',
    US_T: '\x1f\x54',
    US_U: '\x1f\x55',
    US_X: '\x1f\x58',
    US_r: '\x1f\x72',
    US_v: '\x1f\x76' // Sets the DTR signal in the host interface to the MARK or SPACE state
};
export var Underline;
(function (Underline) {
    Underline[Underline["NoUnderline"] = 0] = "NoUnderline";
    Underline[Underline["Single"] = 1] = "Single";
    Underline[Underline["Double"] = 2] = "Double";
})(Underline || (Underline = {}));
export var Justification;
(function (Justification) {
    Justification[Justification["Left"] = 0] = "Left";
    Justification[Justification["Center"] = 1] = "Center";
    Justification[Justification["Right"] = 2] = "Right";
})(Justification || (Justification = {}));
export var DrawerPin;
(function (DrawerPin) {
    DrawerPin[DrawerPin["Pin2"] = 0] = "Pin2";
    DrawerPin[DrawerPin["Pin5"] = 1] = "Pin5";
})(DrawerPin || (DrawerPin = {}));
export var Font;
(function (Font) {
    Font[Font["A"] = 0] = "A";
    Font[Font["B"] = 1] = "B";
    Font[Font["C"] = 2] = "C";
})(Font || (Font = {}));
export var Barcode;
(function (Barcode) {
    Barcode[Barcode["UPCA"] = 0] = "UPCA";
    Barcode[Barcode["UPCE"] = 1] = "UPCE";
    Barcode[Barcode["EAN13"] = 2] = "EAN13";
    Barcode[Barcode["EAN8"] = 3] = "EAN8";
    Barcode[Barcode["CODE39"] = 4] = "CODE39";
    Barcode[Barcode["ITF"] = 5] = "ITF";
    Barcode[Barcode["CODABAR"] = 6] = "CODABAR";
    Barcode[Barcode["CODE93"] = 7] = "CODE93";
    Barcode[Barcode["CODE128"] = 8] = "CODE128";
    Barcode[Barcode["UCC"] = 9] = "UCC";
    Barcode[Barcode["RSS14"] = 10] = "RSS14";
    Barcode[Barcode["RSS14Truncated"] = 11] = "RSS14Truncated";
    Barcode[Barcode["RSSLimited"] = 12] = "RSSLimited";
    Barcode[Barcode["RSSExpanded"] = 13] = "RSSExpanded";
})(Barcode || (Barcode = {}));
export var Position;
(function (Position) {
    Position[Position["NotPrinted"] = 0] = "NotPrinted";
    Position[Position["Above"] = 1] = "Above";
    Position[Position["Below"] = 2] = "Below";
    Position[Position["Both"] = 3] = "Both";
})(Position || (Position = {}));
export var Color;
(function (Color) {
    Color[Color["Color1"] = 0] = "Color1";
    Color[Color["Color2"] = 1] = "Color2";
})(Color || (Color = {}));
export var TextMode;
(function (TextMode) {
    TextMode[TextMode["Normal"] = 0] = "Normal";
    TextMode[TextMode["DualHeight"] = 16] = "DualHeight";
    TextMode[TextMode["DualWidth"] = 32] = "DualWidth";
    TextMode[TextMode["DualWidthAndHeight"] = 48] = "DualWidthAndHeight";
})(TextMode || (TextMode = {}));
export var RasterMode;
(function (RasterMode) {
    RasterMode[RasterMode["Normal"] = 0] = "Normal";
    RasterMode[RasterMode["DualWidth"] = 1] = "DualWidth";
    RasterMode[RasterMode["DualHeight"] = 2] = "DualHeight";
    RasterMode[RasterMode["DualWidthAndHeight"] = 3] = "DualWidthAndHeight";
})(RasterMode || (RasterMode = {}));
export var Density;
(function (Density) {
    Density[Density["Single8Dot"] = 0] = "Single8Dot";
    Density[Density["Double8Dot"] = 1] = "Double8Dot";
    Density[Density["Single24Dot"] = 32] = "Single24Dot";
    Density[Density["Double24Dot"] = 33] = "Double24Dot";
})(Density || (Density = {}));
export var CodeTable;
(function (CodeTable) {
    CodeTable[CodeTable["PC437"] = 0] = "PC437";
    CodeTable[CodeTable["Katakana"] = 1] = "Katakana";
    CodeTable[CodeTable["PC850"] = 2] = "PC850";
    CodeTable[CodeTable["PC860"] = 3] = "PC860";
    CodeTable[CodeTable["PC863"] = 4] = "PC863";
    CodeTable[CodeTable["PC865"] = 5] = "PC865";
    CodeTable[CodeTable["WPC1252"] = 16] = "WPC1252";
    CodeTable[CodeTable["PC866"] = 17] = "PC866";
    CodeTable[CodeTable["PC852"] = 18] = "PC852";
    CodeTable[CodeTable["PC858"] = 19] = "PC858";
    CodeTable[CodeTable["Thai42"] = 20] = "Thai42";
    CodeTable[CodeTable["Thai11"] = 21] = "Thai11";
    CodeTable[CodeTable["Thai13"] = 22] = "Thai13";
    CodeTable[CodeTable["Thai14"] = 23] = "Thai14";
    CodeTable[CodeTable["Thai16"] = 24] = "Thai16";
    CodeTable[CodeTable["Thai17"] = 25] = "Thai17";
    CodeTable[CodeTable["Thai18"] = 26] = "Thai18";
})(CodeTable || (CodeTable = {}));
export var QRErrorCorrectLevel;
(function (QRErrorCorrectLevel) {
    QRErrorCorrectLevel[QRErrorCorrectLevel["L"] = 48] = "L";
    QRErrorCorrectLevel[QRErrorCorrectLevel["M"] = 49] = "M";
    QRErrorCorrectLevel[QRErrorCorrectLevel["Q"] = 50] = "Q";
    QRErrorCorrectLevel[QRErrorCorrectLevel["H"] = 51] = "H";
})(QRErrorCorrectLevel || (QRErrorCorrectLevel = {}));
export var PDF417ErrorCorrectLevel;
(function (PDF417ErrorCorrectLevel) {
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level1"] = 48] = "Level1";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level2"] = 49] = "Level2";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level3"] = 50] = "Level3";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level4"] = 51] = "Level4";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level5"] = 52] = "Level5";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level6"] = 53] = "Level6";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level7"] = 54] = "Level7";
    PDF417ErrorCorrectLevel[PDF417ErrorCorrectLevel["Level8"] = 55] = "Level8";
})(PDF417ErrorCorrectLevel || (PDF417ErrorCorrectLevel = {}));
export var PDF417Type;
(function (PDF417Type) {
    PDF417Type[PDF417Type["Standard"] = 0] = "Standard";
    PDF417Type[PDF417Type["Truncated"] = 1] = "Truncated";
})(PDF417Type || (PDF417Type = {}));
/**
 * [exports description]
 * @type {[type]}
 */
export default _;
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,