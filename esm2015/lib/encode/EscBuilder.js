// import { PrintBuilder } from './PrintBuilder';
import { PrintBuffer } from './PrintBuffer';
import _, { RasterMode } from './commands';
import { styles } from './styles';
const ESC = 0x1b;
const GS = 0x1d;
export class EscBuilder {
    constructor() {
        this.encoder = new TextEncoder();
        this.size = 48;
    }
    init() {
        this.buffer = new PrintBuffer();
        this.write(ESC);
        this.write('@');
        return this;
    }
    flush() {
        return this.buffer.flush();
    }
    feed(lineCount = 1) {
        this.write(ESC);
        this.write('d');
        this.write(lineCount);
        return this;
    }
    cut(cutType = 'full') {
        this.write(GS);
        this.write('V');
        this.write(cutType === 'full' ? 1 : 0);
        return this;
    }
    writeLine(value) {
        return this.write(`${value}\n`);
    }
    drawLine() {
        let lineText = '';
        for (let i = 0; i < this.size; i++) {
            lineText += '-';
        }
        return this.write(`${lineText}\n`);
    }
    setPageSize(size) {
        this.size = size;
        return this;
    }
    writeTable(data) {
        let cellWidth = this.size / data.length;
        let lineTxt = '';
        for (let i = 0; i < data.length; i++) {
            lineTxt += data[i].toString();
            let spaces = cellWidth - data[i].toString().length;
            for (let j = 0; j < spaces; j++) {
                lineTxt += ' ';
            }
        }
        return this.write(`${lineTxt}\n`);
    }
    writeCustomTable(data, options) {
        options = options || { size: [] };
        options.size = options.size || [];
        let [width = 1, height = 1] = options.size || [];
        let baseWidth = Math.floor(this.size / width);
        let cellWidth = Math.floor(baseWidth / data.length);
        let leftoverSpace = baseWidth - cellWidth * data.length;
        let lineStr = '';
        let secondLineEnabled = false;
        let secondLine = [];
        for (let i = 0; i < data.length; i++) {
            let obj = data[i];
            let align = (obj.align || '').toUpperCase();
            let tooLong = false;
            obj.text = obj.text.toString();
            let textLength = obj.text.length;
            if (obj.width) {
                cellWidth = baseWidth * obj.width;
            }
            else if (obj.cols) {
                cellWidth = obj.cols;
            }
            if (cellWidth < textLength) {
                tooLong = true;
                obj.originalText = obj.text;
                obj.text = obj.text.substring(0, cellWidth);
            }
            if (align === 'CENTER') {
                let spaces = (cellWidth - textLength) / 2;
                for (let s = 0; s < spaces; s++) {
                    lineStr += ' ';
                }
                if (obj.text !== '') {
                    if (obj.style) {
                        lineStr +=
                            styles(obj.style) + obj.text + styles('NORMAL');
                    }
                    else {
                        lineStr += obj.text;
                    }
                }
                for (let s = 0; s < spaces - 1; s++) {
                    lineStr += ' ';
                }
            }
            else if (align === 'RIGHT') {
                let spaces = cellWidth - textLength;
                if (leftoverSpace > 0) {
                    spaces += leftoverSpace;
                    leftoverSpace = 0;
                }
                for (let s = 0; s < spaces; s++) {
                    lineStr += ' ';
                }
                if (obj.text !== '') {
                    if (obj.style) {
                        lineStr +=
                            styles(obj.style) + obj.text + styles('NORMAL');
                    }
                    else {
                        lineStr += obj.text;
                    }
                }
            }
            else {
                if (obj.text !== '') {
                    if (obj.style) {
                        lineStr +=
                            styles(obj.style) + obj.text + styles('NORMAL');
                    }
                    else {
                        lineStr += obj.text;
                    }
                }
                let spaces = Math.floor(cellWidth - textLength);
                if (leftoverSpace > 0) {
                    spaces += leftoverSpace;
                    leftoverSpace = 0;
                }
                for (let s = 0; s < spaces; s++) {
                    lineStr += ' ';
                }
            }
            if (tooLong) {
                secondLineEnabled = true;
                obj.text = obj.originalText.substring(cellWidth);
                secondLine.push(obj);
            }
            else {
                obj.text = '';
                secondLine.push(obj);
            }
        }
        // Set size to line
        if (width > 1) {
            lineStr =
                _.TEXT_FORMAT.TXT_CUSTOM_SIZE(width, height) +
                    lineStr +
                    _.TEXT_FORMAT.TXT_NORMAL;
        }
        // Write the line
        this.write(`${lineStr}\n`);
        if (secondLineEnabled) {
            // Writes second line if has
            return this.writeCustomTable(secondLine, options);
        }
        else {
            if (options.feed) {
                this.feed(options.feed);
            }
            if (options.drawLine) {
                this.drawLine();
            }
            return this;
        }
    }
    setInverse(inverse = true) {
        this.write(GS);
        this.write('B');
        this.write(inverse ? 1 : 0);
        return this;
    }
    setUnderline(value = true) {
        this.write(ESC);
        this.write('-');
        this.write(value ? 1 : 0);
        return this;
    }
    setJustification(value = 'left') {
        let alignment;
        switch (value) {
            case 'center':
                alignment = 1;
                break;
            case 'right':
                alignment = 2;
                break;
            default:
                alignment = 0;
                break;
        }
        this.write(ESC);
        this.write('a');
        this.write(alignment);
        return this;
    }
    setBold(bold = true) {
        this.write(ESC);
        this.write('E');
        this.write(bold ? 1 : 0);
        return this;
    }
    raster(image, mode = RasterMode.Normal) {
        const header = new Uint8Array([GS, 0x76, 0x30, mode]);
        const raster = image.toRaster();
        this.write(header);
        this.write(raster.width, 16);
        this.write(raster.height, 16);
        this.write(raster.data);
        return this;
    }
    /**
    @param mode 0, 0x30
    */
    setSize(size = 'normal') {
        this.write(ESC);
        this.write('!');
        this.write(size === 'normal' ? 0 : 0x30);
        return this;
    }
    write(value, number = 8) {
        if (typeof value === 'number') {
            if (number == 8)
                this.buffer.writeUInt8(value);
            if (number == 16)
                this.buffer.writeUInt16LE(value);
            if (number == 32)
                this.buffer.writeUInt32LE(value);
        }
        else if (typeof value === 'string') {
            this.buffer.write(this.encoder.encode(value));
        }
        else {
            this.buffer.write(value);
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,